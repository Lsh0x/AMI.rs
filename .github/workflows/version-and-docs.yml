name: Version Bump & Deploy Docs

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (major, minor, patch, or auto)'
        required: false
        default: 'auto'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "version-docs"
  cancel-in-progress: false

jobs:
  version-bump:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
      version_changed: ${{ steps.bump.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          
          # If auto or not set, analyze commits
          if [ "$BUMP_TYPE" = "auto" ] || [ -z "$BUMP_TYPE" ]; then
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            if [ -z "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"%s" HEAD)
            else
              COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
            fi
            
            echo "Analyzing commits:"
            echo "$COMMITS"
            
            # Check for breaking changes (major)
            if echo "$COMMITS" | grep -qE "^[a-z]+(\(.+\))?!:|BREAKING CHANGE:"; then
              BUMP_TYPE="major"
            # Check for features (minor)
            elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
              BUMP_TYPE="minor"
            # Check for fixes or other changes (patch)
            elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|docs|style|test|chore)(\(.+\))?:"; then
              BUMP_TYPE="patch"
            else
              BUMP_TYPE="none"
            fi
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Bump version
        id: bump
        run: |
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          if [ "$BUMP_TYPE" = "none" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
            exit 0
          fi
          
          # Bump version using cargo-set-version
          cargo set-version --bump $BUMP_TYPE
          
          NEW_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update CHANGELOG
        if: steps.bump.outputs.version_changed == 'true'
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --tag "v${{ steps.bump.outputs.version }}" --output CHANGELOG.md
        env:
          OUTPUT: CHANGELOG.md

      - name: Commit version bump
        if: steps.bump.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.version }}"
          
          git add Cargo.toml Cargo.lock CHANGELOG.md
          git commit -m "chore(release): bump version to $NEW_VERSION

[skip ci]" || echo "No changes to commit"
          
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main --tags

  deploy-docs:
    needs: version-bump
    if: needs.version-bump.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: |
          cargo doc --no-deps --all-features
          echo "<meta http-equiv=\"refresh\" content=\"0; url=rustyiam\">" > target/doc/index.html

      - name: Setup Pages
        id: setup-pages
        uses: actions/configure-pages@v4
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './target/doc'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true
        
      - name: Pages deployment status
        run: |
          if [ "${{ steps.deployment.outcome }}" = "failure" ]; then
            echo "⚠️ GitHub Pages deployment failed."
            echo "Make sure GitHub Pages is enabled in repository settings:"
            echo "Settings → Pages → Source: GitHub Actions"
          else
            echo "✅ Documentation deployed successfully!"
            echo "URL: ${{ steps.deployment.outputs.page_url }}"
          fi

  create-release:
    needs: [version-bump, deploy-docs]
    if: needs.version-bump.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Extract release notes
        id: notes
        run: |
          VERSION="${{ needs.version-bump.outputs.version }}"
          
          # Extract release notes from CHANGELOG
          NOTES=$(awk '/^## \['"$VERSION"'\]/,/^## \[/' CHANGELOG.md | sed '1d;$d' | sed '/^$/d')
          
          if [ -z "$NOTES" ]; then
            NOTES="Release version $VERSION"
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.version }}
          name: Release v${{ needs.version-bump.outputs.version }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    needs: [version-bump, create-release]
    if: needs.version-bump.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run tests before publish
        run: cargo test --all-features

      - name: Verify package
        run: cargo package --allow-dirty

      - name: Publish to crates.io
        if: secrets.CARGO_REGISTRY_TOKEN != ''
        run: |
          echo "Publishing version ${{ needs.version-bump.outputs.version }} to crates.io..."
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: false
        
      - name: Note if token missing
        if: secrets.CARGO_REGISTRY_TOKEN == ''
        run: |
          echo "⚠️ CARGO_REGISTRY_TOKEN secret not configured"
          echo "To publish to crates.io, add your token as a repository secret"
          echo "Generate token at: https://crates.io/settings/tokens"

